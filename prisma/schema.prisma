// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                     String    @id @default(cuid())
  name                   String?
  email                  String    @unique
  image                  String?
  password               String?
  emailVerified          DateTime?   
  createdAt              DateTime  @default(now()) 
  updateAt               DateTime? @updatedAt
  resetPasswordToken     String?  
  resetPasswordExpires   DateTime? 
  accounts               Account[]
  sessions               Session[]

  carts                  Cart[]
  favorites              Favorite[]
  role         Role      @default(USER)


  Order Order[]

  Address Address[]

  PromotionUsage PromotionUsage[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  ADMIN
  USER
}

model Product {
  id                 Int          @id @default(autoincrement())  
  title              String       @db.VarChar(255)
  description        String       @db.Text
  howToUse           String       @db.Text
  image              String       @db.Text
  isNew              Boolean      @default(false) 
  gender             Gender       

  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  // Relation to the Category model
  fragranceFamilyId  Int
  fragranceFamily    FragranceFamily     @relation(fields: [fragranceFamilyId], references: [id])

  productTypeId      Int
  productType        ProductType     @relation(fields: [productTypeId], references: [id])

  formulaId          Int
  formula            Formula         @relation(fields: [formulaId], references: [id])
  
  ingredientId       Int
  ingredient         Ingredient   @relation(fields: [ingredientId], references: [id])

  
  carts              Cart[]
  favorites          Favorite[]

  @@index([gender])
  @@index([fragranceFamilyId]) 
  Inventory Inventory[]

  OrderItem OrderItem[]
}



model Inventory {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int     
  size      Decimal 
  price     Decimal 
  stock     Int     @default(0) // จำนวนสินค้าคงเหลือ
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@unique([productId, size]) 
  Cart Cart[]
  OrderItem OrderItem[]
}



model Ingredient{
  id                 Int          @id @default(autoincrement())
  name               String       @db.VarChar(100) // Field for category name
  products           Product[]    

  @@unique([name]) 
}


model Formula{
  id                 Int          @id @default(autoincrement())
  name               String       @db.VarChar(100) // Field for category name
  products           Product[]    // Relation to Product

  @@unique([name]) 
}


model ProductType{
  id                 Int          @id @default(autoincrement())
  name               String       @db.VarChar(100) // Field for category name
  products           Product[]    // Relation to Product

  @@unique([name]) 
}

model FragranceFamily {
  id                 Int          @id @default(autoincrement())
  name               String       @db.VarChar(100) // Field for category name
  products           Product[]    // Relation to Product

  @@unique([name]) // Ensure unique category name
}


enum Gender {
  UNISEX
  MALE
  FEMALE
}


model Cart {
  id        Int      @id @default(autoincrement())
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    String
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quantity  Int
  inventoryId Int       // Link to the specific Inventory item
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  @@index([productId])
  @@index([userId])
}


model Favorite {
  id        Int      @id @default(autoincrement())
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    String
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, userId])
  @@index([productId])
  @@index([userId])
}

enum OrderStatus {
  PENDING
  SHIPPED
  TRANSIT
  DELIVERED
}

model Order {
  id                Int            @id @default(autoincrement())
  userId            String
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  isPaid            Boolean         @default(false)
  status            OrderStatus     @default(PENDING)
  totalAmount       Decimal     // Add this line for the total amount
  addressId         Int?   
  address           Address?        @relation(fields: [addressId], references: [id], onDelete: SetNull) // ความสัมพันธ์กับ Address
  orderItems        OrderItem[]     // ความสัมพันธ์กับ OrderItem
  promotionCodeId   Int?            // โค้ดโปรโมชั่นที่ใช้
  promotionCode     PromotionCode?  @relation(fields: [promotionCodeId], references: [id], onDelete: SetNull) // ความสัมพันธ์กับ PromotionCode
  stripePaymentIntentId String?       // Add this field

  stripePaymentId   String?        // Add Stripe payment ID field
  paymentStatus     String?        // Payment status from Stripe (e.g., "paid")
}

model OrderItem {
  id          Int      @id @default(autoincrement())
  orderId     Int
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId   Int
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity    Int      @default(1)
  price       Decimal
  inventoryId Int      // New field to link OrderItem to Inventory
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade) // Define relation

  @@index([orderId])
  @@index([productId])
}

model Address {
  id          Int      @id @default(autoincrement())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipient   String   // ฟิลด์สำหรับชื่อผู้รับ
  phoneNumber String   // ฟิลด์สำหรับเบอร์โทรผู้รับ
  address     String   @db.Text   
  district    String    
  province    String   
  zipCode     String   
  country     String   
  isDefault   Boolean  @default(false) // ฟิลด์บูลีนเพื่อบ่งบอกว่าเป็นที่อยู่เริ่มต้น
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  Order Order[]
}

enum PromotionStatus {
  ACTIVE        // ใช้งานได้
  EXPIRED       // หมดอายุ
  NOT_YET_VALID // ยังไม่ถึงเวลา
}

model PromotionCode {
  id                  Int              @id @default(autoincrement())
  code                String           @unique // โค้ดโปรโมชั่น
  discountPercentage  Decimal          // ส่วนลดเปอร์เซ็นต์
  startDate           DateTime         // วันที่เริ่มใช้โค้ด
  endDate             DateTime         // วันที่สิ้นสุดการใช้โค้ด
  description         String           // คำอธิบายโปรโมชั่น
  status              PromotionStatus  // สถานะของโค้ด
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt

  @@index([code])
  Order Order[]
  PromotionUsage PromotionUsage[]      // ความสัมพันธ์กับ PromotionUsage
}

model PromotionUsage {
  id               Int      @id @default(autoincrement())
  promotionCodeId  Int      // ID ของโค้ดโปรโมชั่น
  promotionCode    PromotionCode @relation(fields: [promotionCodeId], references: [id], onDelete: Cascade)
  userId           String   // ID ของผู้ใช้
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  usedAt           DateTime @default(now()) // วันที่ใช้โค้ดโปรโมชั่น

  @@unique([promotionCodeId, userId]) // กำหนดให้ใช้ได้เพียงครั้งเดียวต่อผู้ใช้
  @@index([promotionCodeId])
  @@index([userId])
}

model HeroImage {
  id             Int      @id @default(autoincrement())
  imageUrl       String   @db.Text // URL ของภาพ hero
  label          String   @db.VarChar(255) // ป้ายในภาพ
  buttonText     String   @db.VarChar(100) // ข้อความของปุ่ม Buy Now
  buttonLink     String   @db.Text // ลิงค์ที่ปุ่มจะนำไปเมื่อคลิก
  
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}


model Advertisement {
  id          Int     @id @default(autoincrement())
  description String  @db.Text
}